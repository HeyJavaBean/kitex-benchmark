// Code generated by Kitex v0.1.2. DO NOT EDIT.

package echoserver

import (
	"context"
	"github.com/cloudwego/kitex-benchmark/codec/thrift/kitex_gen/echo"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return echoServerServiceInfo
}

var echoServerServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "EchoServer"
	handlerType := (*echo.EchoServer)(nil)
	methods := map[string]kitex.MethodInfo{
		"Echo":       kitex.NewMethodInfo(echoHandler, newEchoServerEchoArgs, newEchoServerEchoResult, false),
		"NestedEcho": kitex.NewMethodInfo(nestedEchoHandler, newEchoServerNestedEchoArgs, newEchoServerNestedEchoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "echo",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.1.2",
		Extra:           extra,
	}
	return svcInfo
}

func echoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.EchoServerEchoArgs)
	realResult := result.(*echo.EchoServerEchoResult)
	success, err := handler.(echo.EchoServer).Echo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEchoServerEchoArgs() interface{} {
	return echo.NewEchoServerEchoArgs()
}

func newEchoServerEchoResult() interface{} {
	return echo.NewEchoServerEchoResult()
}

func nestedEchoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.EchoServerNestedEchoArgs)
	realResult := result.(*echo.EchoServerNestedEchoResult)
	success, err := handler.(echo.EchoServer).NestedEcho(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEchoServerNestedEchoArgs() interface{} {
	return echo.NewEchoServerNestedEchoArgs()
}

func newEchoServerNestedEchoResult() interface{} {
	return echo.NewEchoServerNestedEchoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Echo(ctx context.Context, req *echo.Request) (r *echo.Response, err error) {
	var _args echo.EchoServerEchoArgs
	_args.Req = req
	var _result echo.EchoServerEchoResult
	if err = p.c.Call(ctx, "Echo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) NestedEcho(ctx context.Context, req *echo.NestedRequest) (r *echo.NestedResponse, err error) {
	var _args echo.EchoServerNestedEchoArgs
	_args.Req = req
	var _result echo.EchoServerNestedEchoResult
	if err = p.c.Call(ctx, "NestedEcho", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
